name: Build

on: [push, pull_request]

jobs:
  Build_win:
    name: Build ${{ matrix.os }}
    runs-on:
      ${{ matrix.os }}
      # --------------------BEGIN WINDOWS BUILD-----------------------
      #matrix can be referenced throughout workflows

    strategy:
      matrix:
        os: [windows-2019]

    steps:
      #This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      - name: Checkout
        uses: actions/checkout@v2

      #GitHub Actions default shell on Windows runners is changing to PowerShell 10/23
      - name: Install Meteor
        run: |
          choco uninstall nodejs-lts -y
          choco install meteor -y
          tree C:\Users\runneradmin\AppData\Local\.meteor /f /a
          echo ::add-path::C:\Users\runneradmin\AppData\Local\.meteor

      #rm C:\Users\runneradmin\AppData\Local\.meteor\packages\meteor-tool\1.10.2\mt-os.windows.x86_32\dev_bundle\bin
      #specify cmd as powershell is default (necessary?)
      - name: update
        timeout-minutes: 120
        shell: cmd
        run: |
          meteor update --verbose

      - name: npm
        shell: cmd
        run: |
          meteor npm install --production
          meteor npm update

      - name: Build
        shell: cmd
        run: |
          set NODE_OPTIONS=--max-old-space-size=4048
          meteor build --server localhost:8265 --directory ../tdarr-${{ matrix.os }} --architecture os.windows.x86_64

      - name: Pack ${{ matrix.os }}.zip
        run: |
          mkdir .\out
          7z a -r .\out\tdarr-${{ matrix.os }}.zip .\tdarr-${{ matrix.os }}
      - name: Upload tdarr-${{ matrix.os }}.zip
        #This uploads artifacts from your workflow.
        uses: actions/upload-artifact@v1
        with:
          name: tdarr-${{ matrix.os }}
          path: .\out
  # Bundle:
  #   name: Build bundle ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [macos-10.15, ubuntu-18.04]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Install Meteor
  #       run: curl https://install.meteor.com/ | sh
  #     - name: Install NPM and build
  #       run: |
  #         meteor npm install --production
  #         meteor build --server localhost:8265 --directory Tdarr
  #     - name: Pack ${{ matrix.os }}.zip
  #       run: |
  #         zip -r -q tdarr-${{ matrix.os }}.zip Tdarr -x *.exe /
  #     - name: Verify zip
  #       run: |
  #         unzip -q tdarr-${{ matrix.os }}.zip -d ./temp
  #         ls -la ./temp
  #     - name: Upload tdarr-${{ matrix.os }}.zip
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: tdarr-${{ matrix.os }}
  #         path: tdarr-${{ matrix.os }}.zip
  # Release:
  #   needs: Bundle
  #   runs-on: ubuntu-18.04
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Get version and changelog
  #       id: meta_gathering
  #       run: |
  #         changelog=$(tail -n +3 latest.txt)
  #         changelog="${changelog//'%'/'%25'}"
  #         changelog="${changelog//$'\n'/'%0A'}"
  #         changelog="${changelog//$'\r'/'%0D'}"
  #         echo "::set-output name=version::v$(grep "newVersion, setNewVersion" imports/ui/App.jsx | awk -F"[()]" '{print $2}')-Beta"
  #         echo "::set-output name=relname::$(cat latest.txt | head -1)"
  #         echo "::set-output name=changelog::$changelog"
  #     - name: Download tdarr-ubuntu-18.04.zip
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: tdarr-ubuntu-18.04
  #     - name: Download tdarr-macos-10.15.zip
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: tdarr-macos-10.15
  #     - name: Verify zip
  #       run: |
  #         mkdir ./temp
  #         unzip -q ./tdarr-ubuntu-18.04/tdarr-ubuntu-18.04.zip -d ./temp/ubuntu
  #         unzip -q ./tdarr-macos-10.15/tdarr-macos-10.15.zip -d ./temp/macos
  #     - name: Sanity check
  #       run: |
  #         printf "${{ steps.meta_gathering.outputs.version }}"
  #         printf "${{ steps.meta_gathering.outputs.relname }}"
  #         printf "${{ steps.meta_gathering.outputs.changelog }}"
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
  #       with:
  #         tag_name: ${{ steps.meta_gathering.outputs.version }}
  #         release_name: ${{ steps.meta_gathering.outputs.relname }}
  #         body: |
  #           ${{ steps.meta_gathering.outputs.changelog }}
  #         draft: false
  #         prerelease: true
  #     - name: Upload Linux Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./tdarr-ubuntu-18.04/tdarr-ubuntu-18.04.zip
  #         asset_name: Tdarr-Linux.zip
  #         asset_content_type: application/zip
  #     - name: Upload macOS Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./tdarr-macos-10.15/tdarr-macos-10.15.zip
  #         asset_name: Tdarr-macOS.zip
  #         asset_content_type: application/zip
  # Docker:
  #   needs: Release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Create VARS
  #       id: vars
  #       env:
  #         _repo: ${{github.repository}}
  #         _ref: ${{github.ref}}
  #       run: |
  #         echo "::set-output name=branch::$(echo ${_ref} | cut -d/ -f3)"
  #         echo "::set-output name=username::$(echo ${_repo} | cut -d/ -f1 | tr '[:upper:]' '[:lower:]')"
  #         echo "::set-output name=repo::$(echo ${_repo} | tr '[:upper:]' '[:lower:]')"
  #     - name: Print VARS
  #       run: |
  #         echo "${{ steps.vars.outputs.branch }} && ${{github.ref}}"
  #         echo "${{ steps.vars.outputs.username }} && ${{github.repository}}"
  #         echo ${{ steps.vars.outputs.repo }}
  #     - name: Build the Docker image
  #       env:
  #         REPO: ${{ steps.vars.outputs.repo }}
  #         BRANCH: ${{ steps.vars.outputs.branch }}
  #       run: |
  #         docker build -t $REPO:aio -t $REPO:aio_${{ steps.meta_gathering.outputs.version }} --build-arg VERSION=${{ steps.meta_gathering.outputs.version }} ./Docker_files/Ubuntu2
  #     - name: Login to registry
  #       env:
  #         DOCKER_USERNAME: ${{ steps.vars.outputs.username }}
  #         DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
  #       run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
  #     - name: Pushes the Docker image
  #       env:
  #         REPO: ${{ steps.vars.outputs.repo }}
  #       run: docker push $REPO
